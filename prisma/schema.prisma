datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  features      Feature[]
  votes         Vote[]
  role          Role      @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Feature {
  id          String       @id @default(cuid())
  title       String       @db.VarChar(100)
  description String       @db.VarChar(500)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  status      FeatureStatus @default(PENDING)
  authorId    String
  author      User         @relation(fields: [authorId], references: [id])
  votes       Vote[]
}

model Vote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  featureId String
  userId    String
  feature   Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, featureId])
}

enum Role {
  USER
  ADMIN
}

enum FeatureStatus {
  PENDING
  PLANNED
  COMPLETED
}

